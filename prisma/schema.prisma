// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Customer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  email      String
  address    String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  userId String? @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])

  tickets Ticket[]
}

model Ticket {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  status      String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())

  customerId String?   @db.ObjectId
  customer   Customer? @relation(fields: [customerId], references: [id])

  userId String? @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String 
  refreshToken       String? @db.String
  accessToken        String? @db.String
  expiresAt          Int?
  tokenType          String?
  scope              String?
  idToken            String?  @db.String
  sessionState       String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique @map("session_token")
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@map("sessions")
// }
 
model User {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?             @map("email_verified")
  image                 String?
  password              String? // from tutorial | for CredentialsProvider
  role                  UserRole               @default(USER) // from tutorial
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // sessions      Session[]

  tickets   Ticket[]
  customers Customer[]
 
  @@map("users")
}
 
model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
  // @@map("verificationtokens")
}

// safer to keep tokens separate, security-wise
model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// assumes user has confirmation if there is a record in the table
// delete confirmation when user starts login flow
model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // optional: add expiry so that user has to authenticate again after a certain time
  // expires DateTime

  @@unique([userId])
}